from __future__ import annotations
import unittest

def password_philosophy_1(report: list[int]):
    total = 0
    for line in report:
        x = line.split(": ")
        y = x[0].split("-")
        letter = y[1][-1]
        minimum = int(y[0])
        maximum = int(y[1][:-1])
        n = x[1].count(letter)
        if n >= minimum and n <= maximum:
            total += 1
    return total

def password_philosophy_2(report: list[int]):
    total = 0
    for line in report:
        x = line.split(": ")
        y = x[0].split("-")
        letter = y[1][-1]

        position_1 = int(y[0]) - 1
        position_2 = int(y[1][:-2]) - 1
        positions = [position_1, position_2]
        
        n = 0
        for i in positions:
            if x[1][i] == letter:
                n += 1
        if n == 1:
            total += 1
    return total

class Test(unittest.TestCase):
    def test_1(self):
        self.assertEqual(2, password_philosophy_1(["1-3 a: abcde", "1-3 b: cdefg", "2-9 c: ccccccccc"]))
    def test_2(self):
        self.assertEqual(1, password_philosophy_2(["1-3 a: abcde", "1-3 b: cdefg", "2-9 c: ccccccccc"]))
    def test_3(self):
        self.assertEqual(2, password_philosophy_2(["1-3 a: abcde", "1-3 b: cdefg", "2-9 c: ccccccccc", "14-16 n: nnxnnnnnnnnnbnzbnnn"]))
        
if __name__ == "__main__":
    # Optional tests
    # unittest.main()

    import pathlib
    with (pathlib.Path(__file__).parent / "02-puzzle-input.txt").open() as policy_report:
        policies = [line.strip() for line in policy_report if line.strip()]
        print(f"Part 1 Answer: {password_philosophy_1(policies)}") 
        print(f"Part 2 Answer: {password_philosophy_2(policies)}")
